func assert(result, desired, message):
    end_message = message + "... ";
    if result == desired then
        end_message += "PASS";
    else then
        end_message += "FAIL";
    end
    print(end_message);
end

func test_scopes():
    print("##### TESTING SCOPES #####");
    a = 1;
    func inner_scope():
        a += 1;
    end
    inner_scope();
    assert(a, 2, "inner function sets outer variable correctly...");        
    if true then
        b = "hello";
    end
    print ("if no error is thrown here, there is a problem:" + str(b));
    # FAIL
end

func test_arithmetic():
    print("##### TESTING ARITHMETIC FUNCTIONALITY #####");
    assert(2+2, 4, "2+2=4"); # 4
    assert(3/4, 0.75, "3/4=0.75"); # 0.75
    assert(2+2*0.75, 3.5, "2+2*0.75=3.5"); # 3.5
    assert(10/200*2, 0.1, "10/200*2=0.1"); # 0.1
end

func test_instantiation():
    print("##### TESTING ACTOR INSTANTIATION #####");
    enter ronnie as actor("ronnie");
    assert(ronnie: name, "ronnie", "ronnie's name is registered as ronnie");
    # PASS
end

func test_return():
    print("##### TESTING RETURN FUNCTIONALITY #####");
    func ret_func(arg):
        exeunt with arg * 2;
    end
    assert(ret_func(2), 4, "return from closure"); 
    # PASS
end

func test_external_calls(example_actor):
    print("##### THIS IS BEING CALLED EXTERNALLY #####");
    print("original name: " + example_actor: name); # should print whatever name the actor originally had.
    example_actor: name = "test name"; # sets the name of the actor to "test name".
    assert(example_actor: name, "test name", "example_actor name change"); # should be "test name"
    # PASS
end

func test_relational_and_equality():
    print ("##### TESTING EQUALITIES AND RELATIONS ######");
    print (str(2==2)); # True
    print (str(2==1)); # False
    print (str(2!=1)); # True    
    print (str(2!=2)); # False
    
    print (str("hello"=="hello")); # True
    print (str("hello"=="goodbye")); # False
    
    print (str(2 > 1)); # True
    print (str(2 > 3)); # False
    print (str(2 >= 2)); # True
   
    print (str(1.5 >= 2)); # False 
    
    print (str(1 < 2)); # True
    print (str(3 < 2)); # False
    print (str(2 <= 2)); # True 
    print (str(2.5 <= 2)); # False
    
    # PASS
end

func test_assignment():
    print ("##### TESTING ARITHMETIC ASSIGNMENT OPERATIONS #####");
    var1 = 0;
    var2 = 2;
    var3 = 6;
    var4 = 10;
    
    var1 += 1;
    print ("incremental assign should be 1: " + str(var1));
    
    var2 *= 2;
    print ("multiplicative assign should be 4: " + str(var2));

    var3 -= 1;
    print ("decremental assign should be 5: " + str(var3));

    var4 /= 4;
    print ("divisive assign should be 2.5: " + str(var4));
    
    # PASS
end

func test_while(iterations):
    print ("##### TESTING WHILE LOOPS #####");
    counter = 0;
    while counter < iterations do
        print("count: " + str(counter));
        counter += 1;
    end
    assert(counter, iterations, "counter == iterations of loop");
    # PASS
end

func test_string_concatenation():
    print("##### TESTING STRING CONCATENATION OPERATORS #####");
    print("hello, " + "world!"); # "hello, world!"
    print("the quick brown fox jumps over the lazy dog..." - " lazy"); # the quick brown fox jumps over the dog
    
    # PASS
end

func test_list_object():
    list = [1, 2, 3, 4, 5, 6, 7, 8];
    list: append(9);
    list: append("string object!");
    counter = 0;
    while counter < list: __len__() do
        print ("list at position " + str(counter) + ": " + str(list[counter]));
        counter += 1;
    end
    
    list: remove_at(1); # should delete 2
    
    print(str("removed second item from the list"));
    
    counter = 0;
    while counter < list: __len__() do
        print ("list at position " + str(counter) + ": " + str(list[counter]));
        counter += 1;
    end
    # PASS
end

func test_for_loop(list_object):
    print ("##### TESTING FOR LOOPS #####");
    for item in list_object do
        print("found list item: " + str(item));
    end
end

func test_advanced_branching(input1, input2):
    print ("##### TESTING ADVANCED BRANCHING #####");
    if input1 == input2 then
        exeunt with "equal";
    else if input1 > input2 then
        exeunt with "greater";
    else if input1 < input2 then
        exeunt with "less";
    else then
        exeunt with "weird";
    end
end

# testing creation of object instances    
enter ronnie_reborn as actor("ronnie");
example_list = ["one", "two", "three", ronnie_reborn, "five"];

# actually run the tests
test_arithmetic();
test_instantiation();
test_return();
test_scopes();
test_relational_and_equality();
test_string_concatenation();
test_assignment();
test_while(5);
test_list_object();
test_for_loop(example_list);

b = test_advanced_branching; # simply copying the function but with a smaller name so i can type it wuicker

assert(b(1, 1), "equal", "first branch");
assert(b(2, 1), "greater", "second branch");
assert(b(1, 2), "less", "third branch");

test_scopes();

# the basic performance test:
func fib(n):
    fibonacci = [0, 1];
    i = 0;
    while i less than n do
        p = fibonacci: __len__();
        n1 = fibonacci[p - 1];
        n2 = fibonacci[p - 2];
        total = n1+n2;
        fibonacci: append(total);
        i += 1;
    end
    exeunt with fibonacci[n];
end

func fib_efficient(n):
    i means 0;
    last_number = 0;
    current_number = 1;
    
    while i less than n do
        current_number = last_number + current_number;
        last_number = current_number;
        i += 1;
    end
    exeunt with last_number;
end

# memory stress test
func fib_recursive(n):
    if n < 2 then
        exeunt with n;
    end
    exeunt with fib_recursive(n-1) + fib_recursive(n - 2);
end


func test_recursive(n, maximum):
    n += 1;
    if n >= maximum then
        exeunt with n;
    end
    exeunt with test_recursive(n, maximum);
end

assert(test_recursive(0, 10), 10, "basic recursive calls");